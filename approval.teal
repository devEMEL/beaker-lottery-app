#pragma version 8
intcblock 0 1
bytecblock 0x 0x73746172745f6c6f7474657279 0x6c6f7474657279506c61794964
txn NumAppArgs
intc_0 // 0
==
bnz main_l12
txna ApplicationArgs 0
pushbytes 0x443a31bd // "create_start_lottery()void"
==
bnz main_l11
txna ApplicationArgs 0
pushbytes 0x1b2fb4f5 // "setup()void"
==
bnz main_l10
txna ApplicationArgs 0
pushbytes 0x597fc7c0 // "register()void"
==
bnz main_l9
txna ApplicationArgs 0
pushbytes 0xea6c6570 // "play(pay)void"
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0xeb77afb5 // "get_play(address)(uint64,uint64,uint64)"
==
bnz main_l7
err
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
callsub getplay_7
store 1
pushbytes 0x151f7c75 // 0x151f7c75
load 1
concat
log
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txn GroupIndex
intc_1 // 1
-
store 0
load 0
gtxns TypeEnum
intc_1 // pay
==
assert
load 0
callsub play_6
intc_1 // 1
return
main_l9:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub register_5
intc_1 // 1
return
main_l10:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub setup_4
intc_1 // 1
return
main_l11:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub createstartlottery_3
intc_1 // 1
return
main_l12:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l14
err
main_l14:
txn ApplicationID
intc_0 // 0
==
assert
callsub create_0
intc_1 // 1
return

// create
create_0:
proto 0 0
intc_1 // 1
return

// auth_only
authonly_1:
proto 1 1
frame_dig -1
global CreatorAddress
==
retsub

// auth_only
authonly_2:
proto 1 1
frame_dig -1
global CreatorAddress
==
retsub

// create_start_lottery
createstartlottery_3:
proto 0 0
txn Sender
callsub authonly_1
// unauthorized
assert
pushbytes 0x77696e6e657273 // "winners"
pushint 640 // 640
box_create
pop
retsub

// setup
setup_4:
proto 0 0
txn Sender
callsub authonly_2
// unauthorized
assert
bytec_1 // "start_lottery"
intc_1 // 1
app_global_put
retsub

// register
register_5:
proto 0 0
intc_0 // 0
dupn 2
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
dup
bytec_1 // "start_lottery"
app_global_get
intc_1 // 1
==
assert
txn Sender
box_get
store 3
store 2
load 3
!
assert
intc_0 // 0
frame_bury 0
intc_0 // 0
frame_bury 1
intc_0 // 0
frame_bury 2
frame_dig 0
itob
frame_dig 1
itob
concat
frame_dig 2
itob
concat
frame_bury 3
txn Sender
box_del
pop
txn Sender
frame_dig 3
box_put
retsub

// play
play_6:
proto 1 0
bytec_0 // ""
intc_0 // 0
dupn 5
bytec_0 // ""
dup
bytec_1 // "start_lottery"
app_global_get
intc_1 // 1
==
assert
txn Sender
box_get
store 5
store 4
load 5
assert
txn Sender
box_get
store 7
store 6
load 7
assert
load 6
frame_bury 0
frame_dig 0
pushint 16 // 16
extract_uint64
frame_bury 1
frame_dig 1
intc_0 // 0
==
assert
frame_dig -1
gtxns Amount
pushint 100 // 100
==
assert
frame_dig -1
gtxns Receiver
global CurrentApplicationAddress
==
assert
bytec_2 // "lotteryPlayId"
bytec_2 // "lotteryPlayId"
app_global_get
intc_1 // 1
+
app_global_put
bytec_2 // "lotteryPlayId"
app_global_get
frame_bury 2
frame_dig -1
gtxns Amount
frame_bury 3
intc_1 // 1
frame_bury 4
frame_dig 2
itob
frame_dig 3
itob
concat
frame_dig 4
itob
concat
frame_bury 0
txn Sender
box_del
pop
txn Sender
frame_dig 0
box_put
retsub

// get_play
getplay_7:
proto 1 1
bytec_0 // ""
frame_dig -1
box_get
store 9
store 8
load 9
assert
load 8
frame_bury 0
retsub